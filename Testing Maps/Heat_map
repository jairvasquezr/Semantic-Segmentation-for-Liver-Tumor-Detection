{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1xCSDKF_E2pj3zxq3ZzH3NB62WH66Wvmp","authorship_tag":"ABX9TyMrRJ3Icd0K9a5EPy6fikae"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Al ser la máscara un arreglo con valores discretos (0, 1, 2), el heat map se visualizará como tres bandas de color"],"metadata":{"id":"eXkbJ25p97D0"}},{"cell_type":"code","source":["import os\n","import numpy as np\n","import torch\n","import torch.nn.functional as F\n","from PIL import Image\n","import cv2\n","from transformers import SegformerForSemanticSegmentation, SegformerImageProcessor\n","\n","def load_image(path):\n","    \"\"\"Carga una imagen y la convierte a RGB.\"\"\"\n","    return Image.open(path).convert(\"RGB\")\n","\n","def predict_tumor_probability(model, feature_extractor, image_path, target_size=(512, 512)):\n","    \"\"\"\n","    Realiza la predicción de la probabilidad para la clase tumor.\n","\n","    Args:\n","        model: Modelo Segformer entrenado.\n","        feature_extractor: Preprocesador de imagen.\n","        image_path: Ruta de la imagen.\n","        target_size: Resolución deseada de salida (por ejemplo, 512x512).\n","\n","    Returns:\n","        Mapa de probabilidad (valores entre 0 y 1) para la clase tumor.\n","    \"\"\"\n","    image = load_image(image_path)\n","    encoding = feature_extractor(images=np.array(image), return_tensors=\"pt\")\n","    pixel_values = encoding[\"pixel_values\"]\n","\n","    with torch.no_grad():\n","        outputs = model(pixel_values)\n","\n","    logits = outputs.logits  # Shape: [1, num_labels, H, W]\n","\n","    # Extraer el canal correspondiente al tumor (se asume que tumor es la etiqueta 2)\n","    tumor_logits = logits[:, 2:3, :, :]  # Shape: [1, 1, H, W]\n","\n","    # Interpolar a la resolución deseada\n","    tumor_logits_up = F.interpolate(tumor_logits, size=target_size, mode=\"bilinear\", align_corners=False)\n","\n","    # Convertir los logits a probabilidad usando sigmoid (para un solo canal)\n","    tumor_prob = torch.sigmoid(tumor_logits_up)\n","\n","    # Eliminar dimensiones extra y convertir a NumPy\n","    tumor_prob = tumor_prob.squeeze().cpu().numpy()  # Forma: (H, W)\n","\n","    return tumor_prob\n","\n","def apply_heatmap_with_smoothing(prob_map, kernel_size=(11, 11)):\n","    \"\"\"\n","    Aplica un suavizado a la probabilidad y genera un heat map usando el colormap JET.\n","\n","    Args:\n","        prob_map: Mapa de probabilidad (valores entre 0 y 1).\n","        kernel_size: Tamaño del kernel para el suavizado (debe ser impar, p.ej., (11,11)).\n","\n","    Returns:\n","        Heat map en formato uint8.\n","    \"\"\"\n","    # Aplicar suavizado con un filtro gaussiano para obtener un gradiente suave\n","    prob_map_smoothed = cv2.GaussianBlur(prob_map, kernel_size, 0)\n","\n","    # Normalizar los valores a [0, 255]\n","    norm_prob = ((prob_map_smoothed - prob_map_smoothed.min()) /\n","                 (prob_map_smoothed.max() - prob_map_smoothed.min() + 1e-7)) * 255\n","    norm_prob = norm_prob.astype(np.uint8)\n","\n","    # Aplicar el colormap JET; en este colormap, los valores altos se mapean a rojo\n","    heat_map = cv2.applyColorMap(norm_prob, cv2.COLORMAP_JET)\n","    return heat_map\n","\n","def main():\n","    # Actualiza estas rutas según tu entorno (Compute Canada u otro)\n","    model_save_path = \"/content/drive/MyDrive/ELAP_Project/models/test_1.0/model_test_1.0\"  # Ruta del modelo entrenado\n","    test_img_dir = \"/content/drive/MyDrive/testing/imagesTs\"  # Directorio de imágenes de testing en PNG\n","    output_dir = \"/content/drive/MyDrive/testing/results_heat_map\"  # Directorio para guardar las predicciones heat map\n","    os.makedirs(output_dir, exist_ok=True)\n","\n","    # Cargar el modelo y el feature extractor\n","    feature_extractor = SegformerImageProcessor.from_pretrained(model_save_path)\n","    model = SegformerForSemanticSegmentation.from_pretrained(model_save_path)\n","    model.eval()  # Modo evaluación\n","\n","    # Listar imágenes de testing (se asume extensión .png)\n","    test_images = [f for f in os.listdir(test_img_dir) if f.lower().endswith(\".png\")]\n","    print(f\"Se encontraron {len(test_images)} imágenes de testing.\")\n","\n","    for img_name in test_images:\n","        img_path = os.path.join(test_img_dir, img_name)\n","\n","        # Obtener el mapa de probabilidad para la clase tumor\n","        tumor_prob = predict_tumor_probability(model, feature_extractor, img_path, target_size=(512,512))\n","\n","        # Aplicar el suavizado y generar el heat map\n","        heat_map = apply_heatmap_with_smoothing(tumor_prob, kernel_size=(11,11))\n","\n","        output_path = os.path.join(output_dir, f\"heat_{img_name}\")\n","        cv2.imwrite(output_path, heat_map)\n","        print(f\"Procesada {img_name} -> {output_path}\")\n","\n","if __name__ == '__main__':\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o7_p7FvObKz9","executionInfo":{"status":"ok","timestamp":1743791807414,"user_tz":240,"elapsed":36466,"user":{"displayName":"Jair Ramos","userId":"08406808744877036134"}},"outputId":"f9d2872b-7f2d-4dcd-aed6-3155becce62d"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Se encontraron 8 imágenes de testing.\n","Procesada Copy of liver_129_slice242.png -> /content/drive/MyDrive/testing/results_heat_map/heat_Copy of liver_129_slice242.png\n","Procesada Copy of liver_95_slice545.png -> /content/drive/MyDrive/testing/results_heat_map/heat_Copy of liver_95_slice545.png\n","Procesada Copy of liver_24_slice240.png -> /content/drive/MyDrive/testing/results_heat_map/heat_Copy of liver_24_slice240.png\n","Procesada Copy of liver_28_slice75.png -> /content/drive/MyDrive/testing/results_heat_map/heat_Copy of liver_28_slice75.png\n","Procesada liver_101_slice387.png -> /content/drive/MyDrive/testing/results_heat_map/heat_liver_101_slice387.png\n","Procesada liver_81_slice288 (1).png -> /content/drive/MyDrive/testing/results_heat_map/heat_liver_81_slice288 (1).png\n","Procesada aug_20_liver_20_slice532.png -> /content/drive/MyDrive/testing/results_heat_map/heat_aug_20_liver_20_slice532.png\n","Procesada liver_54_slice77 (2).png -> /content/drive/MyDrive/testing/results_heat_map/heat_liver_54_slice77 (2).png\n"]}]},{"cell_type":"code","source":["import os\n","import cv2\n","import numpy as np\n","\n","def convert_ground_truth_mask(mask_path, output_path):\n","    # Leer la máscara en escala de grises\n","    mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n","    if mask is None:\n","        print(f\"Error al leer: {mask_path}\")\n","        return\n","\n","    # Definir el mapeo\n","    color_map = {0: 0, 1: 128, 2: 255}\n","    # Aplicar el mapeo utilizando vectorize\n","    vectorized_map = np.vectorize(lambda x: color_map.get(x, 0))\n","    mask_converted = vectorized_map(mask).astype(np.uint8)\n","\n","    cv2.imwrite(output_path, mask_converted)\n","    print(f\"Guardado: {output_path}\")\n","\n","def process_masks_directory(input_dir, output_dir):\n","    os.makedirs(output_dir, exist_ok=True)\n","\n","    for filename in os.listdir(input_dir):\n","        if filename.lower().endswith(\".png\"):\n","            input_path = os.path.join(input_dir, filename)\n","            output_path = os.path.join(output_dir, f\"mapped_{filename}\")\n","            convert_ground_truth_mask(input_path, output_path)\n","\n","# Ejemplo de uso:\n","input_masks_dir = \"/content/drive/MyDrive/testing/labelsTs\"  # Directorio con las máscaras originales\n","output_masks_dir = \"/content/drive/MyDrive/testing/labelsTs_grises\"     # Directorio donde se guardarán las máscaras convertidas\n","\n","process_masks_directory(input_masks_dir, output_masks_dir)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QY1DsmL4hG4p","executionInfo":{"status":"ok","timestamp":1743130086425,"user_tz":240,"elapsed":6333,"user":{"displayName":"Jair Ramos","userId":"08406808744877036134"}},"outputId":"69602e7e-5a32-4eb1-ade7-da81c7aba3c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Guardado: /content/drive/MyDrive/testing/labelsTs_grises/mapped_Copy of liver_129_slice242.png\n","Guardado: /content/drive/MyDrive/testing/labelsTs_grises/mapped_Copy of liver_95_slice545.png\n","Guardado: /content/drive/MyDrive/testing/labelsTs_grises/mapped_Copy of liver_24_slice240.png\n","Guardado: /content/drive/MyDrive/testing/labelsTs_grises/mapped_Copy of liver_28_slice75.png\n","Guardado: /content/drive/MyDrive/testing/labelsTs_grises/mapped_liver_101_slice387 (2).png\n","Guardado: /content/drive/MyDrive/testing/labelsTs_grises/mapped_liver_56_slice202 (1).png\n","Guardado: /content/drive/MyDrive/testing/labelsTs_grises/mapped_liver_81_slice288.png\n","Guardado: /content/drive/MyDrive/testing/labelsTs_grises/mapped_aug_20_liver_20_slice532 (1).png\n"]}]},{"cell_type":"code","source":["# ======================== Heat_map_2 =======================\n","\n","import os\n","import numpy as np\n","import torch\n","import torch.nn.functional as F\n","from PIL import Image\n","import cv2\n","from transformers import SegformerForSemanticSegmentation, SegformerImageProcessor\n","\n","def load_image(path):\n","    \"\"\"Carga una imagen y la convierte a RGB.\"\"\"\n","    return Image.open(path).convert(\"RGB\")\n","\n","def predict_tumor_probability(model, feature_extractor, image_path, target_size=(512, 512)):\n","    \"\"\"\n","    Realiza la predicción de la probabilidad para la clase tumor.\n","\n","    Args:\n","        model: Modelo Segformer entrenado.\n","        feature_extractor: Preprocesador de imagen.\n","        image_path: Ruta de la imagen.\n","        target_size: Resolución deseada de salida (por ejemplo, 512x512).\n","\n","    Returns:\n","        Mapa de probabilidad (valores entre 0 y 1) para la clase tumor.\n","    \"\"\"\n","    image = load_image(image_path)\n","    encoding = feature_extractor(images=np.array(image), return_tensors=\"pt\")\n","    pixel_values = encoding[\"pixel_values\"]\n","\n","    with torch.no_grad():\n","        outputs = model(pixel_values)\n","\n","    logits = outputs.logits  # Shape: [1, num_labels, H, W]\n","\n","    # Extraer el canal correspondiente al tumor (se asume que tumor es la etiqueta 2)\n","    tumor_logits = logits[:, 2:3, :, :]  # Shape: [1, 1, H, W]\n","\n","    # Interpolar a la resolución deseada\n","    tumor_logits_up = F.interpolate(tumor_logits, size=target_size, mode=\"bilinear\", align_corners=False)\n","\n","    # Convertir los logits a probabilidad usando sigmoid (para un solo canal)\n","    tumor_prob = torch.sigmoid(tumor_logits_up)\n","\n","    # Eliminar dimensiones extra y convertir a NumPy\n","    tumor_prob = tumor_prob.squeeze().cpu().numpy()  # Forma: (H, W)\n","\n","    return tumor_prob\n","\n","def apply_heatmap_with_smoothing(prob_map, kernel_size=(11, 11), prob_threshold=0.1):\n","    \"\"\"\n","    Aplica un suavizado, umbral, normalización robusta y operaciones morfológicas para generar un heat map.\n","\n","    Args:\n","        prob_map: Mapa de probabilidad (valores entre 0 y 1).\n","        kernel_size: Tamaño del kernel para el suavizado gaussiano (debe ser impar, e.g., (11,11)).\n","        prob_threshold: Umbral mínimo de probabilidad para considerar una activación válida.\n","\n","    Returns:\n","        Heat map en formato uint8.\n","    \"\"\"\n","    # 1. Suavizado gaussiano para obtener un gradiente suave\n","    prob_map_smoothed = cv2.GaussianBlur(prob_map, kernel_size, 0)\n","\n","    # 2. Aplicar umbral para descartar activaciones espurias\n","    prob_map_thresh = np.where(prob_map_smoothed < prob_threshold, 0, prob_map_smoothed)\n","\n","    # 3. Normalización robusta utilizando percentiles (1 y 99)\n","    lower = np.percentile(prob_map_thresh, 1)\n","    upper = np.percentile(prob_map_thresh, 99)\n","    norm_prob = (prob_map_thresh - lower) / (upper - lower + 1e-7)\n","    norm_prob = np.clip(norm_prob, 0, 1) * 255\n","    norm_prob = norm_prob.astype(np.uint8)\n","\n","    # 4. Operación morfológica: apertura para eliminar pequeñas regiones ruidosas\n","    morph_kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))\n","    norm_prob = cv2.morphologyEx(norm_prob, cv2.MORPH_OPEN, morph_kernel)\n","\n","    # 5. Generar el heat map usando el colormap JET (valores altos se mapean a rojo)\n","    heat_map = cv2.applyColorMap(norm_prob, cv2.COLORMAP_JET)\n","    return heat_map\n","\n","def main():\n","    # Actualiza estas rutas según tu entorno (Compute Canada u otro)\n","    model_save_path = \"/content/drive/MyDrive/ELAP_Project/models/test_1.0/model_test_1.0\"  # Ruta del modelo entrenado\n","    test_img_dir = \"/content/drive/MyDrive/testing/imagesTs\"  # Directorio de imágenes de testing en PNG\n","    output_dir = \"/content/drive/MyDrive/testing/results_heat_map_2\"  # Directorio para guardar las predicciones heat map\n","    os.makedirs(output_dir, exist_ok=True)\n","\n","    # Cargar el modelo y el feature extractor\n","    feature_extractor = SegformerImageProcessor.from_pretrained(model_save_path)\n","    model = SegformerForSemanticSegmentation.from_pretrained(model_save_path)\n","    model.eval()  # Modo evaluación\n","\n","    # Listar imágenes de testing (se asume extensión .png)\n","    test_images = [f for f in os.listdir(test_img_dir) if f.lower().endswith(\".png\")]\n","    print(f\"Se encontraron {len(test_images)} imágenes de testing.\")\n","\n","    for img_name in test_images:\n","        img_path = os.path.join(test_img_dir, img_name)\n","\n","        # Obtener el mapa de probabilidad para la clase tumor\n","        tumor_prob = predict_tumor_probability(model, feature_extractor, img_path, target_size=(512, 512))\n","\n","        # Aplicar el suavizado, umbral, normalización robusta y operaciones morfológicas para generar el heat map\n","        heat_map = apply_heatmap_with_smoothing(tumor_prob, kernel_size=(11, 11), prob_threshold=0.1)\n","\n","        output_path = os.path.join(output_dir, f\"heat_{img_name}\")\n","        cv2.imwrite(output_path, heat_map)\n","        print(f\"Procesada {img_name} -> {output_path}\")\n","\n","if __name__ == '__main__':\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d_3of35svc1X","executionInfo":{"status":"ok","timestamp":1743702154193,"user_tz":240,"elapsed":34967,"user":{"displayName":"Jair Ramos","userId":"08406808744877036134"}},"outputId":"7ab5a876-d03f-459c-b8b6-447f7aa8ee0e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Se encontraron 7 imágenes de testing.\n","Procesada Copy of liver_129_slice242.png -> /content/drive/MyDrive/testing/results_heat_map_2/heat_Copy of liver_129_slice242.png\n","Procesada Copy of liver_95_slice545.png -> /content/drive/MyDrive/testing/results_heat_map_2/heat_Copy of liver_95_slice545.png\n","Procesada Copy of liver_24_slice240.png -> /content/drive/MyDrive/testing/results_heat_map_2/heat_Copy of liver_24_slice240.png\n","Procesada Copy of liver_28_slice75.png -> /content/drive/MyDrive/testing/results_heat_map_2/heat_Copy of liver_28_slice75.png\n","Procesada liver_101_slice387.png -> /content/drive/MyDrive/testing/results_heat_map_2/heat_liver_101_slice387.png\n","Procesada liver_81_slice288 (1).png -> /content/drive/MyDrive/testing/results_heat_map_2/heat_liver_81_slice288 (1).png\n","Procesada aug_20_liver_20_slice532.png -> /content/drive/MyDrive/testing/results_heat_map_2/heat_aug_20_liver_20_slice532.png\n"]}]}]}